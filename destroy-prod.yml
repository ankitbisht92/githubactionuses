name: 'Destroy Orphaned Prod Infra'
on:
  workflow_dispatch:
    inputs:
      commit_sha:
        required: true
        description: 'Commit SHA of the copy of prod to destroy'
  repository_dispatch:
    types: [ destroy_prod ]
jobs:
  get_variables:
    name: 'Get Variable Values'
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2

      - name: 'Set outputs'
        id: set-outputs
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "Triggered by workflow dispatch"
            echo "SHA is: ${{ github.event.inputs.commit_sha }}"
            echo "::set-output name=commit-sha::${{ github.event.inputs.commit_sha }}"
            echo "::set-output name=delay-by::0m"
          else
            echo "Triggered by repository dispatch"
            echo "SHA is: ${{ github.event.client_payload.commit_sha }}"
            echo "::set-output name=commit-sha::${{ github.event.client_payload.commit_sha }}"
          
            # Don't delay on re-runs
            if [[ "${{ github.run_attempt }}" -eq "1" ]]; then
              echo "::set-output name=delay-by::${{ github.event.client_payload.delay_by }}"
            else
              echo "::set-output name=delay-by::0m"
            fi
          fi

    outputs:
      commit_sha: ${{ steps.set-outputs.outputs.commit-sha }}
      delay_by: ${{ steps.set-outputs.outputs.delay-by }}

  validate_sha:
    name: 'Validate SHA'
    runs-on: ubuntu-latest
    needs: [ get_variables ]
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2

      - name: 'Validate SHA'
        run: |
          if [[ "${{ needs.get_variables.outputs.commit_sha }}" == "$( git log -1 --format=%h )" ]]; then
            echo "::error title=Can't destroy current prod::You can't destroy the version of prod that is currently live"
            exit 1
          fi

  delay:
    name: 'Delay'
    runs-on: ubuntu-latest
    needs: [ validate_sha, get_variables ]
    steps:
      - name: 'Sleep'
        uses: juliangruber/sleep-action@v1
        with:
          time: ${{ needs.get_variables.outputs.delay_by }}

  get_prod_rg_outputs:
    name: 'Get prod RG outputs'
    runs-on: ubuntu-latest
    needs: [ delay ]
    defaults:
      run:
        working-directory: ./terraform/resource_group
    env:
      ARM_CLIENT_ID: ${{ secrets.PROD_ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.PROD_ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: 211bb550-03e5-4e25-8e32-05ee16ac07eb
      ARM_TENANT_ID: ${{ secrets.PROD_ARM_TENANT_ID }}
      TF_INPUT: false
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2

      - name: 'Setup Terraform'
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.14.7
          terraform_wrapper: false

      - name: 'Terraform Init'
        run: |
          terraform init \
            -lock-timeout=15m \
            -backend-config="./backends/prod.backend"

      - name: 'Set Terraform Outputs'
        id: set-terraform-outputs
        run: |
          terraform output -json > prod-rg-outputs.json
          echo ::set-output name=resource-group-name::$( jq -r .resource_group_name.value prod-rg-outputs.json)

    outputs:
      resource_group_name: ${{ steps.set-terraform-outputs.outputs.resource-group-name }}

  get_prod_apim_outputs:
    name: 'Get prod APIM Outputs'
    runs-on: ubuntu-latest
    needs: [ delay ]
    defaults:
      run:
        working-directory: ./terraform/apim
    env:
      ARM_CLIENT_ID: ${{ secrets.PROD_ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.PROD_ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: 211bb550-03e5-4e25-8e32-05ee16ac07eb
      ARM_TENANT_ID: ${{ secrets.PROD_ARM_TENANT_ID }}
      TF_INPUT: false
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2

      - name: 'Setup Terraform'
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.14.7
          terraform_wrapper: false

      - name: 'Terraform Init'
        run: |
          terraform init \
            -lock-timeout=15m \
            -backend-config="./backends/prod.backend"

      - name: 'Set Terraform Outputs'
        id: set-terraform-outputs
        run: |
          terraform output -json > apim-outputs.json
          echo ::set-output name=apim-name::$( jq -r .apim_name.value apim-outputs.json )
          echo ::set-output name=apim-vnet-name::$( jq -r .apim_vnet_name.value apim-outputs.json )
          echo ::set-output name=apim-subnet-name::$( jq -r .apim_subnet_name.value apim-outputs.json )
          echo ::set-output name=cdn-profile-website-name::$( jq -r .cdn_profile_website_name.value apim-outputs.json )
          echo ::set-output name=cdn-profile-storybook-name::$( jq -r .cdn_profile_storybook_name.value apim-outputs.json )
          echo ::set-output name=app-insights-name::$( jq -r .app_insights_name.value apim-outputs.json )
          echo ::set-output name=version-set-id::$( jq -r .version_set_id.value apim-outputs.json )

    outputs:
      apim_name: ${{ steps.set-terraform-outputs.outputs.apim-name }}
      apim_vnet_name: ${{ steps.set-terraform-outputs.outputs.apim-vnet-name }}
      apim_subnet_name: ${{ steps.set-terraform-outputs.outputs.apim-subnet-name }}
      cdn_profile_website_name: ${{ steps.set-terraform-outputs.outputs.cdn-profile-website-name }}
      cdn_profile_storybook_name: ${{ steps.set-terraform-outputs.outputs.cdn-profile-storybook-name }}
      app_insights_name: ${{ steps.set-terraform-outputs.outputs.app-insights-name }}
      version_set_id: ${{ steps.set-terraform-outputs.outputs.version-set-id }}

  destroy_prod_frontend:
    name: 'Destroy prod frontend'
    runs-on: ubuntu-latest
    needs:
      - get_variables
      - get_prod_rg_outputs
      - get_prod_apim_outputs
    defaults:
      run:
        working-directory: ./terraform/frontend
    env:
      ARM_CLIENT_ID: ${{ secrets.PROD_ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.PROD_ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: 211bb550-03e5-4e25-8e32-05ee16ac07eb
      ARM_TENANT_ID: ${{ secrets.PROD_ARM_TENANT_ID }}
      TF_INPUT: false
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2

      - name: 'Setup Terraform'
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.14.7
          terraform_wrapper: false

      - name: 'Terraform Init'
        run: |
          terraform init \
            -lock-timeout=15m \
            -backend-config="./backends/prod.backend" \
            -backend-config="key=infra/prod-${{ needs.get_variables.outputs.commit_sha }}.tfstate"

      - name: 'Terraform Destroy'
        run: |
          terraform destroy \
            -auto-approve \
            -lock-timeout=15m \
            -var-file="./var-files/prod.tfvars"
        env:
          TF_VAR_environment_prefix: prod-${{ needs.get_variables.outputs.commit_sha }}
          TF_VAR_resource_group_name: ${{ needs.get_prod_rg_outputs.outputs.resource_group_name }}
          TF_VAR_apim_name: ${{ needs.get_prod_apim_outputs.outputs.apim_name }}
          TF_VAR_cdn_profile_website_name: ${{ needs.get_prod_apim_outputs.outputs.cdn_profile_website_name }}
          TF_VAR_cdn_profile_storybook_name: ${{ needs.get_prod_apim_outputs.outputs.cdn_profile_storybook_name }}
          TF_VAR_app_insights_name: ${{ needs.get_prod_apim_outputs.outputs.app_insights_name }}
          TF_VAR_git_branch_name: ${{ github.head_ref }}

  destroy_prod_backend:
    name: 'Destroy prod backend'
    runs-on: ubuntu-latest
    needs:
      - get_variables
      - get_prod_rg_outputs
      - get_prod_apim_outputs
    defaults:
      run:
        working-directory: ./terraform/backend
    env:
      ARM_CLIENT_ID: ${{ secrets.PROD_ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.PROD_ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: 211bb550-03e5-4e25-8e32-05ee16ac07eb
      ARM_TENANT_ID: ${{ secrets.PROD_ARM_TENANT_ID }}
      TF_INPUT: false
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2

      - name: 'Setup Terraform'
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.14.7
          terraform_wrapper: false

      - name: 'Terraform Init'
        run: |
          terraform init \
            -lock-timeout=15m \
            -backend-config="./backends/prod.backend" \
            -backend-config="key=infra/prod-${{ needs.get_variables.outputs.commit_sha }}-backend.tfstate"

      - name: 'Terraform Destroy'
        run: |
          terraform destroy \
            -auto-approve \
            -lock-timeout=15m \
            -var-file="./var-files/prod.tfvars"
        env:
          TF_VAR_apim_name: ${{ needs.get_prod_apim_outputs.outputs.apim_name }}
          TF_VAR_apim_vnet_name: ${{ needs.get_prod_apim_outputs.outputs.apim_vnet_name }}
          TF_VAR_apim_subnet_name: ${{ needs.get_prod_apim_outputs.outputs.apim_subnet_name }}
          TF_VAR_app_insights_name: ${{ needs.get_prod_apim_outputs.outputs.app_insights_name }}
          TF_VAR_environment_prefix: prod-${{ needs.get_variables.outputs.commit_sha }}
          TF_VAR_frontend_cdn_url: doesnt-matter
          TF_VAR_git_branch_name: ${{ github.head_ref }}
          TF_VAR_resource_group_name: ${{ needs.get_prod_rg_outputs.outputs.resource_group_name }}
          TF_VAR_version_set_id: ${{ needs.get_prod_apim_outputs.outputs.version_set_id }}
          TF_VAR_myaccounts_aes_key: ${{ secrets.MYACCOUNTS_AES_KEY }}
          TF_VAR_myaccounts_aes_key_vector: ${{ secrets.MYACCOUNTS_AES_KEY_VECTOR }}
