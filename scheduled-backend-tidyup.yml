name: "Tidy-Up Prod Backends"
on:
  schedule:
    # Run at 10pm every saturday
    - cron: 0 22 * * 6
  workflow_dispatch:
jobs:
  find_prod_version:
    name: "Find current prod version"
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout repo"
        uses: actions/checkout@v2

      - name: "Restore prefix file"
        id: restore-prefix-file
        uses: actions/cache@v2
        with:
          path: last_successful_deploy_prefix.txt
          key: last_successful_deploy_prefix-check-${{ github.run_id }}-${{ github.run_number }}
          restore-keys: |
            last_successful_deploy_prefix-

      - name: "Check cache was restored"
        id: check-deployed
        run: |
          if [[ ! -f last_successful_deploy_prefix.txt ]]; then
            echo ::error title=Error restoring cache::Couldn\'t find version of prod to destroy
            exit 1
          fi

      - name: "Set output"
        id: set-output
        run: |
          echo "Current prod prefix is: $(cat last_successful_deploy_prefix.txt)"
          echo "::set-output name=prod-prefix::$(cat last_successful_deploy_prefix.txt)"

    outputs:
      prod_prefix: ${{ steps.set-output.outputs.prod-prefix }}

  get_prod_rg_outputs:
    name: 'Get prod RG outputs'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform/resource_group
    env:
      ARM_CLIENT_ID: ${{ secrets.PROD_ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.PROD_ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: 211bb550-03e5-4e25-8e32-05ee16ac07eb
      ARM_TENANT_ID: ${{ secrets.PROD_ARM_TENANT_ID }}
      TF_INPUT: false
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2

      - name: 'Setup Terraform'
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.14.7
          terraform_wrapper: false

      - name: 'Terraform Init'
        run: |
          terraform init \
            -lock-timeout=15m \
            -backend-config="./backends/prod.backend"

      - name: 'Set Terraform Outputs'
        id: set-terraform-outputs
        run: |
          terraform output -json > prod-rg-outputs.json
          echo ::set-output name=resource-group-name::$( jq -r .resource_group_name.value prod-rg-outputs.json)

    outputs:
      resource_group_name: ${{ steps.set-terraform-outputs.outputs.resource-group-name }}

  get_prod_apim_outputs:
    name: 'Get prod APIM outputs'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform/apim
    env:
      ARM_CLIENT_ID: ${{ secrets.PROD_ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.PROD_ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: 211bb550-03e5-4e25-8e32-05ee16ac07eb
      ARM_TENANT_ID: ${{ secrets.PROD_ARM_TENANT_ID }}
      TF_INPUT: false
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2

      - name: 'Setup Terraform'
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.14.7
          terraform_wrapper: false

      - name: 'Terraform Init'
        run: |
          terraform init \
            -lock-timeout=15m \
            -backend-config="./backends/prod.backend"

      - name: 'Set Terraform Outputs'
        id: set-terraform-outputs
        run: |
          terraform output -json > apim-outputs.json
          echo ::set-output name=apim-name::$( jq -r .apim_name.value apim-outputs.json )

    outputs:
      apim_name: ${{ steps.set-terraform-outputs.outputs.apim-name }}

  trigger_destroy:
    name: "Trigger destroy workflows"
    needs:
      - find_prod_version
      - get_prod_rg_outputs
      - get_prod_apim_outputs
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Login to Azure"
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.PROD_AZURE_CREDENTIALS }}

      - name: "Get all APIs"
        uses: azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: |
            az apim api list --resource-group ${{ needs.get_prod_rg_outputs.outputs.resource_group_name }} --service-name ${{ needs.get_prod_apim_outputs.outputs.apim_name }} | jq -r 'map_values(.name)' > apis.json

      - name: "Trigger destroy jobs"
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.REPOSITORY_DISPATCH_PAT }}
          script: |
            const currentProdPrefix = '${{ needs.find_prod_version.outputs.prod_prefix }}';
            const currentProdVersion = currentProdPrefix.slice(currentProdPrefix.length - 7, currentProdPrefix.length);
            console.log('Current prod version is:', currentProdVersion);
            
            const fs = require('fs');
            const triggerDestroyWorkflows = require('.github/scripts/triggerProdDestroy');
            await triggerDestroyWorkflows({ fs, github, currentProdVersion });